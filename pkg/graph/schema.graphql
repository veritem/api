type Name {
  first: String!
  middle: String!
  last: String!
  username: String!
}

type Blog {
  id: ID!
  title: String!
  url: String!
  image: String!
  summary: String!
  lastUpdated: String!
}

type Project {
  id: ID!
  name: String!
  description: String!
  isPublic: Boolean!
  githubUrl: String!
  projectUrl: String!
  createdAt: String!
  updatedAt: String!
}

type ProjectEcosystem {
  id: ID!
  name: String!
  projects: [Project!]!
  createdAt: String!
  updatedAt: String!
}

input ScretInput {
  role: Role!
  expiresIn: String
}

input SkillInput {
  name: String!
  description: String!
  skillsCategoryID: String!
}

input SkillsCategoryInput {
  name: String!
  description: String!
}

type Social {
  id: ID!
  name: String!
  profile: String!
}

type SkillsCategory {
  id: ID!
  name: String!
  description: String!
  createdAt: String!
  updatedAt: String!
  skills: [Skill!]!
}

type Skill {
  id: ID!
  name: String!
  description: String!
  createdAt: String!
  updatedAt: String!
}

type Secret {
  id: ID!
  role: Role!
  token: String!
  expiresIn: String!
  createdAt: String!
  UpdatedAt: String!
}

enum Role {
  GUEST
  MENTAINER
  ADMIN
}

input CreateProjectInput {
  name: String!
  categoryID: ID!
  description: String!
  isPublic: Boolean!
  githubUrl: String!
  projectUrl: String!
}

input ProjectEcoInput {
  name: String!
}

type OpenSource {
  openedPr: Int!
  starsReceived: Int!
  issuesSubmitted: Int!
  repositoriesContributed: Int!
  repositories: Int!
}

type Mutation {
  createSkillCategory(input: SkillsCategoryInput!): SkillsCategory!
  createSkill(input: SkillInput!): Skill!
  generateSecret(input: ScretInput!): Secret!
  createProject(input: CreateProjectInput!): Project!
  createProjectEcosystem(input: ProjectEcoInput!): ProjectEcosystem!
}

type Query {
  names: Name!
  status: String!
  blogs: [Blog!]
  socials: [Social!]!
  skillsCategories: [SkillsCategory!]!
  skills: [Skill!]!
  openSource: OpenSource!
  projects: [Project!]!
  projectsEcosystems: [ProjectEcosystem!]!
}
